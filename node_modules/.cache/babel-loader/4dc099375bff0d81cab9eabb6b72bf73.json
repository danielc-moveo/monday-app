{"ast":null,"code":"import axios from \"../api/axios\";\nexport const getCurrentItemID = async mondayInstance => {\n  try {\n    debugger;\n    const contextResponse = await mondayInstance.get(\"context\");\n    const {\n      itemId\n    } = contextResponse.data;\n    return itemId;\n  } catch (error) {}\n};\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  debugger;\n  const query = ` query {items( ids : ${itemId}) {\n        updates {\n          id\n          body\n          creator_id\n          assets {\n            id\n            public_url\n          }\n        }\n      }}`;\n  const updatesResponse = await mondayInstance.api(query);\n  const processedUpdates = getProcessedUpdates(mondayInstance, updatesResponse);\n  console.log(processedUpdates); //process response...\n};\n\nconst getProcessedUpdates = (mondayInstance, updatesResponse) => {\n  if (updatesResponse.data.items[0].updates.length > 0) {\n    //has updates\n    const updatesWithAssets = updatesResponse.data.items[0].updates.filter(({\n      assets\n    }) => assets);\n    return updatesWithAssets.map(update => {\n      const {\n        assets,\n        creator_id\n      } = update;\n      const voiceMemos = getVoiceMemos(mondayInstance, assets, creator_id);\n      return { ...voiceMemos,\n        creator_id\n      };\n    });\n  }\n};\n\nconst getVoiceMemos = (mondayInstance, assets, creator_id) => {\n  return assets.filter(asset => filterAssetByAssetType(mondayInstance, asset, creator_id));\n};\n\nconst filterAssetByAssetType = (mondayInstance, asset, creator_id) => {\n  const isAssetVoiceMemo = asset.public_url.includes(\".webm\");\n\n  if (isAssetVoiceMemo) {\n    const creatorName = getCreatorName(mondayInstance, creator_id);\n  }\n};\n\nconst getCreatorName = async (mondayInstance, creator_id) => {\n  const query = ` query { me ( id : ${creator_id} ) {name}\n         }`;\n  const response = await mondayInstance.api(query);\n  console.log(response);\n};\n\nexport const _blobToFile = (theBlob, fileName) => {\n  theBlob.lastModifiedDate = new Date();\n  theBlob.name = fileName;\n  const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n  const newFile = new File([theBlob], fileName, {\n    type: processedBlob.type\n  });\n  return newFile;\n};\nexport const _createUpdate = async (mondayInstance, itemId) => {\n  const query = `mutation {\n        create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const {\n    id\n  } = response.data.create_update;\n  return id;\n};\nexport const _addFileToUpdate = async (newUpdateId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n  const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {//internal 500 server error\n  }\n};\nexport const _createColumn = async (mondayInstance, boardId, columnName) => {\n  const query = `mutation {\n        create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const {\n    id\n  } = response.data.create_column;\n  return id;\n};\nexport const _addFileToColumn = async (itemId, newColumnId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n  const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {//internal 500 server error\n  }\n};","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/utils/helper.js"],"names":["axios","getCurrentItemID","mondayInstance","contextResponse","get","itemId","data","error","getVoiceMessagesHistory","query","updatesResponse","api","processedUpdates","getProcessedUpdates","console","log","items","updates","length","updatesWithAssets","filter","assets","map","update","creator_id","voiceMemos","getVoiceMemos","asset","filterAssetByAssetType","isAssetVoiceMemo","public_url","includes","creatorName","getCreatorName","response","_blobToFile","theBlob","fileName","lastModifiedDate","Date","name","processedBlob","slice","size","newFile","File","type","_createUpdate","id","create_update","_addFileToUpdate","newUpdateId","file","formData","FormData","append","noVariableQuery","res","post","process","env","REACT_APP_BASE_URL","_createColumn","boardId","columnName","create_column","_addFileToColumn","newColumnId"],"mappings":"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","sourcesContent":["import axios from \"../api/axios\";\n\nexport const getCurrentItemID = async (mondayInstance) => {\n  try {\n    debugger;\n    const contextResponse = await mondayInstance.get(\"context\");\n    const { itemId } = contextResponse.data;\n    return itemId;\n  } catch (error) {}\n};\n\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  debugger;\n  const query = ` query {items( ids : ${itemId}) {\n        updates {\n          id\n          body\n          creator_id\n          assets {\n            id\n            public_url\n          }\n        }\n      }}`;\n\n  const updatesResponse = await mondayInstance.api(query);\n  const processedUpdates = getProcessedUpdates(mondayInstance, updatesResponse);\n  console.log(processedUpdates);\n\n  //process response...\n};\n\nconst getProcessedUpdates = (mondayInstance, updatesResponse) => {\n  if (updatesResponse.data.items[0].updates.length > 0) {\n    //has updates\n    const updatesWithAssets = updatesResponse.data.items[0].updates.filter(\n      ({ assets }) => assets\n    );\n    return updatesWithAssets.map((update) => {\n      const { assets, creator_id } = update;\n      const voiceMemos = getVoiceMemos(mondayInstance, assets, creator_id);\n      return { ...voiceMemos, creator_id };\n    });\n  }\n};\n\nconst getVoiceMemos = (mondayInstance, assets, creator_id) => {\n  return assets.filter((asset) =>\n    filterAssetByAssetType(mondayInstance, asset, creator_id)\n  );\n};\n\nconst filterAssetByAssetType = (mondayInstance, asset, creator_id) => {\n  const isAssetVoiceMemo = asset.public_url.includes(\".webm\");\n  if (isAssetVoiceMemo) {\n    const creatorName = getCreatorName(mondayInstance, creator_id);\n  }\n};\n\nconst getCreatorName = async (mondayInstance, creator_id) => {\n  const query = ` query { me ( id : ${creator_id} ) {name}\n         }`;\n\n  const response = await mondayInstance.api(query);\n  console.log(response);\n};\n\nexport const _blobToFile = (theBlob, fileName) => {\n  theBlob.lastModifiedDate = new Date();\n  theBlob.name = fileName;\n  const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n  const newFile = new File([theBlob], fileName, {\n    type: processedBlob.type,\n  });\n\n  return newFile;\n};\n\nexport const _createUpdate = async (mondayInstance, itemId) => {\n  const query = `mutation {\n        create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n\n  const { id } = response.data.create_update;\n  return id;\n};\n\nexport const _addFileToUpdate = async (newUpdateId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n  const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {\n    //internal 500 server error\n  }\n};\n\nexport const _createColumn = async (mondayInstance, boardId, columnName) => {\n  const query = `mutation {\n        create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const { id } = response.data.create_column;\n  return id;\n};\n\nexport const _addFileToColumn = async (itemId, newColumnId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n  const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {\n    //internal 500 server error\n  }\n};\n"]},"metadata":{},"sourceType":"module"}