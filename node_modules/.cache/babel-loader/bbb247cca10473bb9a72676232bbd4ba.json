{"ast":null,"code":"var _jsxFileName = \"/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport mondaySdk from \"monday-sdk-js\"; // import VideoRecorder from \"react-video-recorder\";\n// import { Recorder } from \"react-voice-recorder\";\n// import AudioReactRecorder, { RecordState } from \"audio-react-recorder\";\n// import Recorder from \"react-mp3-recorder\";\n\nimport useRecorder from \"./components/useRecorder\";\nimport axios from \"axios\";\nimport { useCallback } from \"react\";\nconst apiToken = \"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjExMzE4NzU1NywidWlkIjoyMjYwNDQ1MCwiaWFkIjoiMjAyMS0wNi0xMFQxMDowNTo1MS44NzdaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6OTE5NjAxNCwicmduIjoidXNlMSJ9.MIJ6sN_Rqnfkpfkl51eBCBQMgx_RPNvBGRXMlmTrUKs\";\nconst monday = mondaySdk({\n  clientId: \"4e35caa6c69460ae555a974852334926\",\n  apiToken\n});\n\nconst AppSolution = () => {\n  // constructor(props) {\n  //   super(props);\n  //   // Default state\n  //   this.state = {\n  //     recordState: null,\n  //     settings: {},\n  //     context: {},\n  //     name: \"\",\n  //     audioDetails: {\n  //       url: null,\n  //       blob: null,\n  //       chunks: null,\n  //       duration: {\n  //         h: null,\n  //         m: null,\n  //         s: null,\n  //       },\n  //     },\n  //   };\n  // }\n  const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n  let [audioURL, isRecording, startRecording, stopRecording, blob] = useRecorder();\n\n  const _handleBlob = useCallback(() => async blob => {\n    try {\n      debugger; // let blob = await fetch(objectUrl).then(r => r.blob());\n\n      const file = _blobToFile(blob, \"myFileName\");\n\n      debugger;\n      const response = await monday.get(\"context\");\n      const {\n        itemId,\n        boardId\n      } = response.data;\n      const newUpdateId = await _createUpdate(itemId);\n      const newColumnId = await _createColumn(boardId, \"Description\");\n      await _addFileToUpdate(newUpdateId, file);\n      await _addFileToColumn(itemId, newColumnId, file);\n    } catch (error) {}\n  }, []);\n\n  useEffect(() => {\n    monday.listen(\"settings\", res => {\n      setSettings(res.data);\n    });\n    monday.api(`query { me { name } }`).then(res => {\n      setUserName(res.data.me.name);\n    });\n\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]); // const start = () => {\n  //   this.setState({\n  //     recordState: RecordState.START,\n  //   });\n  // };\n  // const stop = () => {\n  //   this.setState({\n  //     recordState: RecordState.STOP,\n  //   });\n  // };\n  //audioData contains blob and blobUrl\n  // const onStop = (audioData) => {\n  //   console.log(\"audioData\", audioData);\n  // };\n  // TODO: set up event listeners\n  // const _onRecordingComplete = (blob) => {\n  //   debugger;\n  //   console.log(\"recording\", blob);\n  // };\n  // const _onRecordingError = (err) => {\n  //   debugger;\n  //   console.log(\"recording error\", err);\n  // };\n\n  const _blobToFile = (theBlob, fileName) => {\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    const newFile = new File([theBlob], fileName, {\n      type: theBlob.type\n    });\n    return newFile;\n  };\n\n  const _createUpdate = async itemId => {\n    const response = await monday.api(`mutation {\n      create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n      id\n      }\n      }`);\n    const {\n      id\n    } = response.data.create_update;\n    return id;\n  };\n\n  const _createColumn = async (boardId, columnName) => {\n    const response = await monday.api(`mutation {\n      create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n      id\n      }\n      }`);\n    const {\n      id\n    } = response.data.create_column;\n    return id;\n  };\n\n  const _addFileToColumn = async (itemId, newColumnId, file) => {\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.webm\");\n    const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(\"https://api.monday.com/v2/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: apiToken\n        }\n      });\n    } catch (error) {\n      debugger; //internal 500 server error\n    }\n  };\n\n  const _addFileToUpdate = async (newUpdateId, file) => {\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.webm\");\n    const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(\"https://api.monday.com/v2/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: apiToken\n        }\n      });\n    } catch (error) {//internal 500 server error\n    }\n  };\n\n  const handleAudioStop = data => {\n    console.log(data);\n    this.setState({\n      audioDetails: data\n    });\n  };\n\n  const handleAudioUpload = file => {\n    console.log(file);\n  };\n\n  const handleReset = () => {\n    const reset = {\n      url: null,\n      blob: null,\n      chunks: null,\n      duration: {\n        h: null,\n        m: null,\n        s: null\n      }\n    };\n    this.setState({\n      audioDetails: reset\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, userName && `Hello, ${userName}`, /*#__PURE__*/React.createElement(\"audio\", {\n    src: audioURL,\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startRecording,\n    disabled: isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }, \"start recording\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopRecording,\n    disabled: !isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }\n  }, \"stop recording\"));\n};\n\nexport default AppSolution;","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js"],"names":["React","useEffect","useState","mondaySdk","useRecorder","axios","useCallback","apiToken","monday","clientId","AppSolution","settings","setSettings","userName","setUserName","audioURL","isRecording","startRecording","stopRecording","blob","_handleBlob","file","_blobToFile","response","get","itemId","boardId","data","newUpdateId","_createUpdate","newColumnId","_createColumn","_addFileToUpdate","_addFileToColumn","error","listen","res","api","then","me","name","theBlob","fileName","lastModifiedDate","Date","newFile","File","type","id","create_update","columnName","create_column","formData","FormData","append","noVariableQuery","post","headers","Authorization","handleAudioStop","console","log","setState","audioDetails","handleAudioUpload","handleReset","reset","url","chunks","duration","h","m","s"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport mondaySdk from \"monday-sdk-js\";\n// import VideoRecorder from \"react-video-recorder\";\n// import { Recorder } from \"react-voice-recorder\";\n// import AudioReactRecorder, { RecordState } from \"audio-react-recorder\";\n// import Recorder from \"react-mp3-recorder\";\n\nimport useRecorder from \"./components/useRecorder\";\nimport axios from \"axios\";\nimport { useCallback } from \"react\";\n\nconst apiToken =\n  \"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjExMzE4NzU1NywidWlkIjoyMjYwNDQ1MCwiaWFkIjoiMjAyMS0wNi0xMFQxMDowNTo1MS44NzdaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6OTE5NjAxNCwicmduIjoidXNlMSJ9.MIJ6sN_Rqnfkpfkl51eBCBQMgx_RPNvBGRXMlmTrUKs\";\n\nconst monday = mondaySdk({\n  clientId: \"4e35caa6c69460ae555a974852334926\",\n  apiToken,\n});\n\nconst AppSolution = () => {\n  // constructor(props) {\n  //   super(props);\n\n  //   // Default state\n  //   this.state = {\n  //     recordState: null,\n\n  //     settings: {},\n  //     context: {},\n  //     name: \"\",\n\n  //     audioDetails: {\n  //       url: null,\n  //       blob: null,\n  //       chunks: null,\n  //       duration: {\n  //         h: null,\n  //         m: null,\n  //         s: null,\n  //       },\n  //     },\n  //   };\n  // }\n\n  const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n\n  let [audioURL, isRecording, startRecording, stopRecording, blob] =\n    useRecorder();\n\n  const _handleBlob = useCallback(\n    () => async (blob) => {\n      try {\n        debugger;\n        // let blob = await fetch(objectUrl).then(r => r.blob());\n        const file = _blobToFile(blob, \"myFileName\");\n        debugger;\n\n        const response = await monday.get(\"context\");\n        const { itemId, boardId } = response.data;\n        const newUpdateId = await _createUpdate(itemId);\n        const newColumnId = await _createColumn(boardId, \"Description\");\n\n        await _addFileToUpdate(newUpdateId, file);\n        await _addFileToColumn(itemId, newColumnId, file);\n      } catch (error) {}\n    },\n    []\n  );\n\n  useEffect(() => {\n    monday.listen(\"settings\", (res) => {\n      setSettings(res.data);\n    });\n    monday.api(`query { me { name } }`).then((res) => {\n      setUserName(res.data.me.name);\n    });\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]);\n\n  // const start = () => {\n  //   this.setState({\n  //     recordState: RecordState.START,\n  //   });\n  // };\n\n  // const stop = () => {\n  //   this.setState({\n  //     recordState: RecordState.STOP,\n  //   });\n  // };\n\n  //audioData contains blob and blobUrl\n  // const onStop = (audioData) => {\n  //   console.log(\"audioData\", audioData);\n  // };\n\n  // TODO: set up event listeners\n\n  // const _onRecordingComplete = (blob) => {\n  //   debugger;\n  //   console.log(\"recording\", blob);\n  // };\n\n  // const _onRecordingError = (err) => {\n  //   debugger;\n  //   console.log(\"recording error\", err);\n  // };\n\n  const _blobToFile = (theBlob, fileName) => {\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    const newFile = new File([theBlob], fileName, {\n      type: theBlob.type,\n    });\n\n    return newFile;\n  };\n\n  const _createUpdate = async (itemId) => {\n    const response = await monday.api(`mutation {\n      create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n      id\n      }\n      }`);\n\n    const { id } = response.data.create_update;\n    return id;\n  };\n\n  const _createColumn = async (boardId, columnName) => {\n    const response = await monday.api(`mutation {\n      create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n      id\n      }\n      }`);\n    const { id } = response.data.create_column;\n    return id;\n  };\n\n  const _addFileToColumn = async (itemId, newColumnId, file) => {\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.webm\");\n\n    const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(\"https://api.monday.com/v2/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: apiToken,\n        },\n      });\n    } catch (error) {\n      debugger;\n      //internal 500 server error\n    }\n  };\n\n  const _addFileToUpdate = async (newUpdateId, file) => {\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.webm\");\n\n    const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(\"https://api.monday.com/v2/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: apiToken,\n        },\n      });\n    } catch (error) {\n      //internal 500 server error\n    }\n  };\n\n  const handleAudioStop = (data) => {\n    console.log(data);\n    this.setState({ audioDetails: data });\n  };\n  const handleAudioUpload = (file) => {\n    console.log(file);\n  };\n  const handleReset = () => {\n    const reset = {\n      url: null,\n      blob: null,\n      chunks: null,\n      duration: {\n        h: null,\n        m: null,\n        s: null,\n      },\n    };\n    this.setState({ audioDetails: reset });\n  };\n\n  return (\n    <div className=\"App\">\n      {userName && `Hello, ${userName}`}\n      {/* <Recorder\n          onRecordingComplete={this._onRecordingComplete}\n          onRecordingError={this._onRecordingError}\n        /> */}\n      {/* <VideoRecorder\n          onRecordingComplete={(videoBlob) => {\n            // Do something with the video...\n            this._handleBlob(videoBlob);\n          }}\n          constraints={{\n            video: false,\n            audio: true,\n          }}\n          countdownTime={2000}\n          mimeType={\"audio/mp4\"}\n        /> */}\n      {/* <Recorder\n          record={true}\n          title={\"New recording\"}\n          audioURL={this.state.audioDetails.url}\n          showUIAudio\n          handleAudioStop={(data) => this.handleAudioStop(data)}\n          handleOnChange={(value) => this.handleOnChange(value, \"firstname\")}\n          handleAudioUpload={(data) => this._handleBlob(data)}\n          handleReset={() => this.handleReset()}\n          mimeTypeToUseWhenRecording={\"audio/webm\"}\n        /> */}\n      <audio src={audioURL} controls />\n      <button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </button>\n    </div>\n  );\n};\n\nexport default AppSolution;\n"]},"metadata":{},"sourceType":"module"}