{"ast":null,"code":"var _jsxFileName = \"/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport mondaySdk from \"monday-sdk-js\"; // import VideoRecorder from \"react-video-recorder\";\n// import { Recorder } from \"react-voice-recorder\";\n// import AudioReactRecorder, { RecordState } from \"audio-react-recorder\";\n// import Recorder from \"react-mp3-recorder\";\n\nimport useRecorder from \"./components/useRecorder\";\nimport axios from \"./api\";\nimport { useCallback } from \"react\";\nconst monday = mondaySdk({\n  clientId: process.env.REACT_APP_CLIENT_ID,\n  apiToken: process.env.REACT_APP_API_TOKEN\n});\n\nconst AppSolution = () => {\n  // constructor(props) {\n  //   super(props);\n  //   // Default state\n  //   this.state = {\n  //     recordState: null,\n  //     settings: {},\n  //     context: {},\n  //     name: \"\",\n  //     audioDetails: {\n  //       url: null,\n  //       blob: null,\n  //       chunks: null,\n  //       duration: {\n  //         h: null,\n  //         m: null,\n  //         s: null,\n  //       },\n  //     },\n  //   };\n  // }\n  // const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n  let [audioURL, isRecording, startRecording, stopRecording, blob] = useRecorder();\n\n  const _handleBlob = useCallback(async blob => {\n    try {\n      debugger;\n\n      const file = _blobToFile(blob, \"myFileName\");\n\n      const mondaySdkContextResponse = await monday.get(\"context\");\n      const {\n        itemId,\n        boardId\n      } = mondaySdkContextResponse.data; // const updates = await getUpdates();\n\n      const newUpdateId = await _createUpdate(itemId);\n      const newColumnId = await _createColumn(boardId, \"Description\");\n      await _addFileToUpdate(newUpdateId, file);\n      await _addFileToColumn(itemId, newColumnId, file);\n    } catch (error) {}\n  }, []);\n\n  useEffect(() => {\n    // monday.listen(\"settings\", (res) => {\n    //   setSettings(res.data);\n    // });\n    const query = ` query {items {\n      name\n      updates {\n        id\n        body\n        assets {\n          id\n          public_url\n        }\n        \n      }\n    }}`;\n    monday.api(query).then(res => {// setUserName(res.data.me.name);\n    });\n\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]);\n\n  const _blobToFile = (theBlob, fileName) => {\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n    debugger;\n    const newFile = new File([theBlob], fileName, {\n      type: processedBlob.type\n    });\n    return newFile;\n  };\n\n  const _createUpdate = async itemId => {\n    const response = await monday.api(`mutation {\n      create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n      id\n      }\n      }`);\n    const {\n      id\n    } = response.data.create_update;\n    return id;\n  };\n\n  const _createColumn = async (boardId, columnName) => {\n    const response = await monday.api(`mutation {\n      create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n      id\n      }\n      }`);\n    const {\n      id\n    } = response.data.create_column;\n    return id;\n  };\n\n  const _addFileToColumn = async (itemId, newColumnId, file) => {\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.mp4\");\n    const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n    } catch (error) {//internal 500 server error\n    }\n  };\n\n  const _addFileToUpdate = async (newUpdateId, file) => {\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.mp4\");\n    const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n    } catch (error) {//internal 500 server error\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, userName && `Hello, ${userName}`, /*#__PURE__*/React.createElement(\"audio\", {\n    src: audioURL,\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startRecording,\n    disabled: isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, \"start recording\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopRecording,\n    disabled: !isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, \"stop recording\"));\n};\n\nexport default AppSolution;","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js"],"names":["React","useEffect","useState","mondaySdk","useRecorder","axios","useCallback","monday","clientId","process","env","REACT_APP_CLIENT_ID","apiToken","REACT_APP_API_TOKEN","AppSolution","userName","setUserName","audioURL","isRecording","startRecording","stopRecording","blob","_handleBlob","file","_blobToFile","mondaySdkContextResponse","get","itemId","boardId","data","newUpdateId","_createUpdate","newColumnId","_createColumn","_addFileToUpdate","_addFileToColumn","error","query","api","then","res","theBlob","fileName","lastModifiedDate","Date","name","processedBlob","slice","size","newFile","File","type","response","id","create_update","columnName","create_column","formData","FormData","append","noVariableQuery","post","REACT_APP_BASE_URL"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport mondaySdk from \"monday-sdk-js\";\n// import VideoRecorder from \"react-video-recorder\";\n// import { Recorder } from \"react-voice-recorder\";\n// import AudioReactRecorder, { RecordState } from \"audio-react-recorder\";\n// import Recorder from \"react-mp3-recorder\";\n\nimport useRecorder from \"./components/useRecorder\";\nimport axios from \"./api\";\nimport { useCallback } from \"react\";\n\nconst monday = mondaySdk({\n  clientId: process.env.REACT_APP_CLIENT_ID,\n  apiToken: process.env.REACT_APP_API_TOKEN,\n});\n\nconst AppSolution = () => {\n  // constructor(props) {\n  //   super(props);\n\n  //   // Default state\n  //   this.state = {\n  //     recordState: null,\n\n  //     settings: {},\n  //     context: {},\n  //     name: \"\",\n\n  //     audioDetails: {\n  //       url: null,\n  //       blob: null,\n  //       chunks: null,\n  //       duration: {\n  //         h: null,\n  //         m: null,\n  //         s: null,\n  //       },\n  //     },\n  //   };\n  // }\n\n  // const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n\n  let [audioURL, isRecording, startRecording, stopRecording, blob] =\n    useRecorder();\n\n  const _handleBlob = useCallback(async (blob) => {\n    try {\n      debugger;\n      const file = _blobToFile(blob, \"myFileName\");\n      const mondaySdkContextResponse = await monday.get(\"context\");\n      const { itemId, boardId } = mondaySdkContextResponse.data;\n      // const updates = await getUpdates();\n\n      const newUpdateId = await _createUpdate(itemId);\n      const newColumnId = await _createColumn(boardId, \"Description\");\n\n      await _addFileToUpdate(newUpdateId, file);\n      await _addFileToColumn(itemId, newColumnId, file);\n    } catch (error) {}\n  }, []);\n\n  useEffect(() => {\n    // monday.listen(\"settings\", (res) => {\n    //   setSettings(res.data);\n    // });\n\n    const query = ` query {items {\n      name\n      updates {\n        id\n        body\n        assets {\n          id\n          public_url\n        }\n        \n      }\n    }}`;\n\n    monday.api(query).then((res) => {\n      // setUserName(res.data.me.name);\n    });\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]);\n\n  const _blobToFile = (theBlob, fileName) => {\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n    debugger;\n    const newFile = new File([theBlob], fileName, {\n      type: processedBlob.type,\n    });\n\n    return newFile;\n  };\n\n  const _createUpdate = async (itemId) => {\n    const response = await monday.api(`mutation {\n      create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n      id\n      }\n      }`);\n\n    const { id } = response.data.create_update;\n    return id;\n  };\n\n  const _createColumn = async (boardId, columnName) => {\n    const response = await monday.api(`mutation {\n      create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n      id\n      }\n      }`);\n    const { id } = response.data.create_column;\n    return id;\n  };\n\n  const _addFileToColumn = async (itemId, newColumnId, file) => {\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n    const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n    } catch (error) {\n      //internal 500 server error\n    }\n  };\n\n  const _addFileToUpdate = async (newUpdateId, file) => {\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n    const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n    } catch (error) {\n      //internal 500 server error\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {userName && `Hello, ${userName}`}\n      <audio src={audioURL} controls />\n      <button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </button>\n    </div>\n  );\n};\n\nexport default AppSolution;\n"]},"metadata":{},"sourceType":"module"}