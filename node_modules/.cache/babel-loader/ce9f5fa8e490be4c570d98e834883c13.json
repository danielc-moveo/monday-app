{"ast":null,"code":"var _jsxFileName = \"/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport useRecorder from \"./components/useRecorder\";\nimport { useCallback } from \"react\";\nimport { _blobToFile, _createUpdate, _addFileToUpdate } from \"./utils/add-voice\";\nimport { getCurrentItemID, getVoiceMessagesHistory } from \"./utils/on-load\";\nimport { MainScreen } from \"./components/MainScreen\";\n\nconst AppSolution = ({\n  mondayInstance\n}) => {\n  // const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n  const [currentItemId, setCurrentItemId] = useState(null);\n  const [messagesHistory, setMessagesHistory] = useState(null);\n  let [audioURL, isRecording, startRecording, stopRecording, blob] = useRecorder();\n\n  const _handleBlob = useCallback(async blob => {\n    try {\n      const file = _blobToFile(blob, \"myFileName\"); // const updates = await getUpdates();\n\n\n      const newUpdateId = await _createUpdate(currentItemId);\n      await _addFileToUpdate(newUpdateId, file);\n    } catch (error) {}\n  }, [currentItemId]);\n\n  useEffect(() => {\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]);\n  useEffect(() => {\n    const fetchData = async () => {\n      debugger;\n      const idResponse = await getCurrentItemID(mondayInstance);\n      console.log(idResponse);\n      setCurrentItemId(idResponse);\n      const messagesHistory = await getVoiceMessagesHistory(mondayInstance, idResponse);\n      console.log(messagesHistory);\n      setMessagesHistory([...messagesHistory]);\n    };\n\n    if (currentItemId) fetchData();\n  }, [mondayInstance, currentItemId]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), userName && `Hello, ${userName}`, /*#__PURE__*/React.createElement(\"audio\", {\n    src: audioURL,\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startRecording,\n    disabled: isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"start recording\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopRecording,\n    disabled: !isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"stop recording\"));\n};\n\nexport default AppSolution;","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js"],"names":["React","useEffect","useState","useRecorder","useCallback","_blobToFile","_createUpdate","_addFileToUpdate","getCurrentItemID","getVoiceMessagesHistory","MainScreen","AppSolution","mondayInstance","userName","setUserName","currentItemId","setCurrentItemId","messagesHistory","setMessagesHistory","audioURL","isRecording","startRecording","stopRecording","blob","_handleBlob","file","newUpdateId","error","fetchData","idResponse","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAO,qCAAP;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SACEC,WADF,EAEEC,aAFF,EAGEC,gBAHF,QAIO,mBAJP;AAKA,SAASC,gBAAT,EAA2BC,uBAA3B,QAA0D,iBAA1D;AACA,SAASC,UAAT,QAA2B,yBAA3B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AAC1C;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,CAAC,IAAD,CAAtD;AAEA,MAAI,CAACiB,QAAD,EAAWC,WAAX,EAAwBC,cAAxB,EAAwCC,aAAxC,EAAuDC,IAAvD,IACFpB,WAAW,EADb;;AAGA,QAAMqB,WAAW,GAAGpB,WAAW,CAC7B,MAAOmB,IAAP,IAAgB;AACd,QAAI;AACF,YAAME,IAAI,GAAGpB,WAAW,CAACkB,IAAD,EAAO,YAAP,CAAxB,CADE,CAEF;;;AACA,YAAMG,WAAW,GAAG,MAAMpB,aAAa,CAACS,aAAD,CAAvC;AACA,YAAMR,gBAAgB,CAACmB,WAAD,EAAcD,IAAd,CAAtB;AACD,KALD,CAKE,OAAOE,KAAP,EAAc,CAAE;AACnB,GAR4B,EAS7B,CAACZ,aAAD,CAT6B,CAA/B;;AAYAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,IAAJ,EAAU;AACRC,MAAAA,WAAW,CAACD,IAAD,CAAX;AACD;AACF,GAJQ,EAIN,CAACA,IAAD,EAAOC,WAAP,CAJM,CAAT;AAMAvB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2B,SAAS,GAAG,YAAY;AAC5B;AACA,YAAMC,UAAU,GAAG,MAAMrB,gBAAgB,CAACI,cAAD,CAAzC;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAb,MAAAA,gBAAgB,CAACa,UAAD,CAAhB;AACA,YAAMZ,eAAe,GAAG,MAAMR,uBAAuB,CACnDG,cADmD,EAEnDiB,UAFmD,CAArD;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAYd,eAAZ;AACAC,MAAAA,kBAAkB,CAAC,CAAC,GAAGD,eAAJ,CAAD,CAAlB;AACD,KAXD;;AAYA,QAAIF,aAAJ,EAAmBa,SAAS;AAC7B,GAdQ,EAcN,CAAChB,cAAD,EAAiBG,aAAjB,CAdM,CAAT;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGF,QAAQ,IAAK,UAASA,QAAS,EAFlC,eAGE;AAAO,IAAA,GAAG,EAAEM,QAAZ;AAAsB,IAAA,QAAQ,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE;AAAQ,IAAA,OAAO,EAAEE,cAAjB;AAAiC,IAAA,QAAQ,EAAED,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJF,eAOE;AAAQ,IAAA,OAAO,EAAEE,aAAjB;AAAgC,IAAA,QAAQ,EAAE,CAACF,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,CADF;AAaD,CAxDD;;AA0DA,eAAeT,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport useRecorder from \"./components/useRecorder\";\nimport { useCallback } from \"react\";\nimport {\n  _blobToFile,\n  _createUpdate,\n  _addFileToUpdate,\n} from \"./utils/add-voice\";\nimport { getCurrentItemID, getVoiceMessagesHistory } from \"./utils/on-load\";\nimport { MainScreen } from \"./components/MainScreen\";\n\nconst AppSolution = ({ mondayInstance }) => {\n  // const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n  const [currentItemId, setCurrentItemId] = useState(null);\n  const [messagesHistory, setMessagesHistory] = useState(null);\n\n  let [audioURL, isRecording, startRecording, stopRecording, blob] =\n    useRecorder();\n\n  const _handleBlob = useCallback(\n    async (blob) => {\n      try {\n        const file = _blobToFile(blob, \"myFileName\");\n        // const updates = await getUpdates();\n        const newUpdateId = await _createUpdate(currentItemId);\n        await _addFileToUpdate(newUpdateId, file);\n      } catch (error) {}\n    },\n    [currentItemId]\n  );\n\n  useEffect(() => {\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      debugger\n      const idResponse = await getCurrentItemID(mondayInstance);\n      console.log(idResponse);\n      setCurrentItemId(idResponse);\n      const messagesHistory = await getVoiceMessagesHistory(\n        mondayInstance,\n        idResponse\n      );\n      console.log(messagesHistory);\n      setMessagesHistory([...messagesHistory]);\n    };\n    if (currentItemId) fetchData();\n  }, [mondayInstance, currentItemId]);\n\n  return (\n    <div className=\"App\">\n      <MainScreen />\n      {userName && `Hello, ${userName}`}\n      <audio src={audioURL} controls />\n      <button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </button>\n    </div>\n  );\n};\n\nexport default AppSolution;\n"]},"metadata":{},"sourceType":"module"}