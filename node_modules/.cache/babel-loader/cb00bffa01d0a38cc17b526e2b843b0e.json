{"ast":null,"code":"import axios from \"../api/axios\"; // import { mondayInstance } from \"../api/monday\";\n\nexport const getCurrentItemID = async mondayInstance => {\n  try {\n    debugger;\n    const contextResponse = await mondayInstance.get(\"context\");\n    const {\n      itemId\n    } = contextResponse.data;\n    return itemId;\n  } catch (error) {}\n};\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  debugger;\n  const query = ` query {items( ids : ${itemId}) {\n        updates {\n          id\n          body\n          creator_id\n          assets {\n            id\n            public_url\n          }\n        }\n      }}`;\n  const updatesResponse = await mondayInstance.api(query);\n  const processedUpdates = getProcessedUpdates(updatesResponse); //process response...\n};\n\nconst getProcessedUpdates = updatesResponse => {\n  if (updatesResponse.data.items[0].updates.length > 0) {\n    //has updates\n    const filteredUpdates = updatesResponse.data.items[0].updates.filter(({\n      assets\n    }) => assets);\n    console.log(filteredUpdates);\n    const result = filteredUpdates.map(update => {\n      const {\n        assets,\n        creator_id\n      } = update;\n      const voiceMemos = getVoiceMemos(assets);\n      return { ...voiceMemos,\n        creator_id\n      };\n    });\n  }\n};\n\nconst getVoiceMemos = assets => {\n  return assets.filter(asset => filterAsset(asset));\n};\n\nconst filterAsset = asset => {\n  return asset.public_url.includes(\".webm\");\n};\n\nexport const _blobToFile = (theBlob, fileName) => {\n  theBlob.lastModifiedDate = new Date();\n  theBlob.name = fileName;\n  const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n  debugger;\n  const newFile = new File([theBlob], fileName, {\n    type: processedBlob.type\n  });\n  return newFile;\n};\nexport const _createUpdate = async (mondayInstance, itemId) => {\n  const query = `mutation {\n        create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const {\n    id\n  } = response.data.create_update;\n  return id;\n};\nexport const _addFileToUpdate = async (newUpdateId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n  const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {//internal 500 server error\n  }\n};\nexport const _createColumn = async (mondayInstance, boardId, columnName) => {\n  const query = `mutation {\n        create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const {\n    id\n  } = response.data.create_column;\n  return id;\n};\nexport const _addFileToColumn = async (itemId, newColumnId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n  const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {//internal 500 server error\n  }\n};","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/utils/helper.js"],"names":["axios","getCurrentItemID","mondayInstance","contextResponse","get","itemId","data","error","getVoiceMessagesHistory","query","updatesResponse","api","processedUpdates","getProcessedUpdates","items","updates","length","filteredUpdates","filter","assets","console","log","result","map","update","creator_id","voiceMemos","getVoiceMemos","asset","filterAsset","public_url","includes","_blobToFile","theBlob","fileName","lastModifiedDate","Date","name","processedBlob","slice","size","newFile","File","type","_createUpdate","response","id","create_update","_addFileToUpdate","newUpdateId","file","formData","FormData","append","noVariableQuery","res","post","process","env","REACT_APP_BASE_URL","_createColumn","boardId","columnName","create_column","_addFileToColumn","newColumnId"],"mappings":"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","sourcesContent":["import axios from \"../api/axios\";\n// import { mondayInstance } from \"../api/monday\";\n\nexport const getCurrentItemID = async (mondayInstance) => {\n  try {\n    debugger;\n    const contextResponse = await mondayInstance.get(\"context\");\n    const { itemId } = contextResponse.data;\n    return itemId;\n  } catch (error) {}\n};\n\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  debugger;\n  const query = ` query {items( ids : ${itemId}) {\n        updates {\n          id\n          body\n          creator_id\n          assets {\n            id\n            public_url\n          }\n        }\n      }}`;\n\n  const updatesResponse = await mondayInstance.api(query);\n  const processedUpdates = getProcessedUpdates(updatesResponse);\n  //process response...\n};\n\nconst getProcessedUpdates = (updatesResponse) => {\n  if (updatesResponse.data.items[0].updates.length > 0) {\n    //has updates\n    const filteredUpdates = updatesResponse.data.items[0].updates.filter(\n      ({ assets }) => assets\n    );\n    console.log(filteredUpdates);\n    const result = filteredUpdates.map((update) => {\n      const { assets, creator_id } = update;\n      const voiceMemos = getVoiceMemos(assets);\n      return { ...voiceMemos, creator_id };\n    });\n  }\n};\n\nconst getVoiceMemos = (assets) => {\n  return assets.filter((asset) => filterAsset(asset));\n};\n\nconst filterAsset = (asset) => {\n  return asset.public_url.includes(\".webm\");\n};\n\nexport const _blobToFile = (theBlob, fileName) => {\n  theBlob.lastModifiedDate = new Date();\n  theBlob.name = fileName;\n  const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n  debugger;\n  const newFile = new File([theBlob], fileName, {\n    type: processedBlob.type,\n  });\n\n  return newFile;\n};\n\nexport const _createUpdate = async (mondayInstance, itemId) => {\n  const query = `mutation {\n        create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n\n  const { id } = response.data.create_update;\n  return id;\n};\n\nexport const _addFileToUpdate = async (newUpdateId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n  const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {\n    //internal 500 server error\n  }\n};\n\nexport const _createColumn = async (mondayInstance, boardId, columnName) => {\n  const query = `mutation {\n        create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const { id } = response.data.create_column;\n  return id;\n};\n\nexport const _addFileToColumn = async (itemId, newColumnId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n  const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {\n    //internal 500 server error\n  }\n};\n"]},"metadata":{},"sourceType":"module"}