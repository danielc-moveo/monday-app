{"ast":null,"code":"var _jsxFileName = \"/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js\";\nimport React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\"; // import Recorder from \"react-mp3-recorder\";\n\nimport VideoRecorder from \"react-video-recorder\";\nimport axios from \"axios\";\nimport { Recorder } from \"react-voice-recorder\";\nimport \"react-voice-recorder/dist/index.css\";\nimport AudioReactRecorder, { RecordState } from \"audio-react-recorder\";\nimport useRecorder from \"./components/useRecorder\";\nconst apiToken = \"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjExMzE4NzU1NywidWlkIjoyMjYwNDQ1MCwiaWFkIjoiMjAyMS0wNi0xMFQxMDowNTo1MS44NzdaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6OTE5NjAxNCwicmduIjoidXNlMSJ9.MIJ6sN_Rqnfkpfkl51eBCBQMgx_RPNvBGRXMlmTrUKs\";\nconst monday = mondaySdk({\n  clientId: \"4e35caa6c69460ae555a974852334926\",\n  apiToken\n});\n\nconst AppSolution = () => {\n  // constructor(props) {\n  //   super(props);\n  //   // Default state\n  //   this.state = {\n  //     recordState: null,\n  //     settings: {},\n  //     context: {},\n  //     name: \"\",\n  //     audioDetails: {\n  //       url: null,\n  //       blob: null,\n  //       chunks: null,\n  //       duration: {\n  //         h: null,\n  //         m: null,\n  //         s: null,\n  //       },\n  //     },\n  //   };\n  // }\n  let [audioURL, isRecording, startRecording, stopRecording] = useRecorder();\n\n  const start = () => {\n    this.setState({\n      recordState: RecordState.START\n    });\n  };\n\n  const stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    });\n  }; //audioData contains blob and blobUrl\n\n\n  const onStop = audioData => {\n    console.log(\"audioData\", audioData);\n  };\n\n  useEffect(() => {// monday.listen(\"settings\", (res) => {\n    //   this.setState({ settings: res.data });\n    // });\n    // monday.api(`query { me { name } }`).then((res) => {\n    //   this.setState({ name: res.data.me.name });\n    // });\n  }, []); // TODO: set up event listeners\n\n  const _onRecordingComplete = blob => {\n    debugger;\n    console.log(\"recording\", blob);\n  };\n\n  const _onRecordingError = err => {\n    debugger;\n    console.log(\"recording error\", err);\n  };\n\n  const _blobToFile = (theBlob, fileName) => {\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    const newFile = new File([theBlob], fileName, {\n      type: theBlob.type\n    });\n    return newFile;\n  };\n\n  const _handleBlob = async blob => {\n    try {\n      debugger;\n\n      const file = _blobToFile(blob, \"myFileName\");\n\n      debugger;\n      const response = await monday.get(\"context\");\n      const {\n        itemId,\n        boardId\n      } = response.data;\n      const newUpdateId = await _createUpdate(itemId);\n      const newColumnId = await _createColumn(boardId, \"Description\");\n      await _addFileToUpdate(newUpdateId, file);\n      await _addFileToColumn(itemId, newColumnId, file);\n    } catch (error) {}\n  };\n\n  const _createUpdate = async itemId => {\n    //query to create an update\n    // monday.api(`query { me { name } }`).then((res) => {\n    //   this.setState({ name: res.data.me.name });\n    // });\n    const response = await monday.api(`mutation {\n      create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n      id\n      }\n      }`);\n    const {\n      id\n    } = response.data.create_update;\n    return id;\n  };\n\n  const _createColumn = async (boardId, columnName) => {\n    //query to create an update\n    // monday.api(`query { me { name } }`).then((res) => {\n    //   this.setState({ name: res.data.me.name });\n    // });\n    const response = await monday.api(`mutation {\n      create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n      id\n      }\n      }`);\n    const {\n      id\n    } = response.data.create_column;\n    return id;\n  };\n\n  const _addFileToColumn = async (itemId, newColumnId, file) => {\n    // const response = await monday.api(`mutation {\n    //   add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId}, file: ${file}) {\n    //   id\n    //   }\n    //   }`);\n    // debugger;\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.webm\");\n    const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(\"https://api.monday.com/v2/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: apiToken\n        }\n      });\n    } catch (error) {\n      debugger; //internal 500 server error\n    }\n  };\n\n  const _addFileToUpdate = async (newUpdateId, file) => {\n    const blob = new Blob([\"Hello World!\"], {\n      type: \"text/plain;charset=utf-8\"\n    });\n    const newFile = new File([blob], \"fileName\", {\n      type: blob.type\n    }); // let query = `mutation {\n    //   add_file_to_update (update_id: ${newUpdateId}, file: ${newFile}) {\n    //   id\n    //   }\n    //   }`;\n    // const query = `mutation add_file($update_id:Int!, $file: File!) {\n    //   add_file_to_update(update_id: $update_id, file: $file) {\n    //   id\n    //   }\n    //   }\n    //   `;\n    // const variables = {\n    //   update_ids: newUpdateId,\n    //   file: newFile,\n    // };\n\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.webm\");\n    const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(\"https://api.monday.com/v2/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: apiToken\n        }\n      });\n    } catch (error) {\n      debugger; //internal 500 server error\n    } // fetch(\"https://api.monday.com/v2\", {\n    //   method: \"post\",\n    //   headers: {\n    //     \"Content-Type\": \"multipart/form-data\",\n    //     Authorization: apiToken,\n    //   },\n    //   body: JSON.stringify({\n    //     query: query,\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((res) => {\n    //     debugger;\n    //     console.log(JSON.stringify(res, null, 2));\n    //   });\n    // await axios\n    //   .post(\"https://api.monday.com/v2\", {\n    //     headers: {\n    //       // \"Content-Type\": \"multipart/form-data\",\n    //       Authorization: apiToken,\n    //     },\n    //     method: \"post\",\n    //     data: {\n    //       query: `mutation {\n    //     add_file_to_update (update_id: Int!, $file: File!) {\n    //     id\n    //     }\n    //     }`,\n    //       variables: {\n    //         update_id: newUpdateId,\n    //         $file: JSON.stringify(file),\n    //       },\n    //     },\n    //   })\n    //   .then((result) => {\n    //     debugger;\n    //     console.log(result.data);\n    //   })\n    //   .catch(function (error) {\n    //     debugger;\n    //     console.log(error);\n    //   });\n\n\n    const config = {\n      headers: {\n        Authorization: apiToken,\n        \"Content-Type\": \"multipart/form-data\"\n      }\n    }; // try {\n    //   const response = await axios.post(\"https://api.monday.com/v2/file\", file, config);\n    // } catch (error) {\n  };\n\n  const handleAudioStop = data => {\n    console.log(data);\n    this.setState({\n      audioDetails: data\n    });\n  };\n\n  const handleAudioUpload = file => {\n    console.log(file);\n  };\n\n  const handleReset = () => {\n    const reset = {\n      url: null,\n      blob: null,\n      chunks: null,\n      duration: {\n        h: null,\n        m: null,\n        s: null\n      }\n    };\n    this.setState({\n      audioDetails: reset\n    });\n  }; // const newFile = this._blobToFile(\"\", \"myNewFileName\");\n  // const { recordState } = this.state;\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\" // style={{ background: this.state.settings.background, margin: \"auto\" }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"audio\", {\n    src: audioURL,\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startRecording,\n    disabled: isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }\n  }, \"start recording\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopRecording,\n    disabled: !isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }\n  }, \"stop recording\"));\n};\n\nexport default AppSolution;","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js"],"names":["React","useEffect","mondaySdk","VideoRecorder","axios","Recorder","AudioReactRecorder","RecordState","useRecorder","apiToken","monday","clientId","AppSolution","audioURL","isRecording","startRecording","stopRecording","start","setState","recordState","START","stop","STOP","onStop","audioData","console","log","_onRecordingComplete","blob","_onRecordingError","err","_blobToFile","theBlob","fileName","lastModifiedDate","Date","name","newFile","File","type","_handleBlob","file","response","get","itemId","boardId","data","newUpdateId","_createUpdate","newColumnId","_createColumn","_addFileToUpdate","_addFileToColumn","error","api","id","create_update","columnName","create_column","formData","FormData","append","noVariableQuery","res","post","headers","Authorization","Blob","config","handleAudioStop","audioDetails","handleAudioUpload","handleReset","reset","url","chunks","duration","h","m","s"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\n// import Recorder from \"react-mp3-recorder\";\nimport VideoRecorder from \"react-video-recorder\";\nimport axios from \"axios\";\nimport { Recorder } from \"react-voice-recorder\";\nimport \"react-voice-recorder/dist/index.css\";\n\nimport AudioReactRecorder, { RecordState } from \"audio-react-recorder\";\nimport useRecorder from \"./components/useRecorder\";\nconst apiToken =\n  \"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjExMzE4NzU1NywidWlkIjoyMjYwNDQ1MCwiaWFkIjoiMjAyMS0wNi0xMFQxMDowNTo1MS44NzdaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6OTE5NjAxNCwicmduIjoidXNlMSJ9.MIJ6sN_Rqnfkpfkl51eBCBQMgx_RPNvBGRXMlmTrUKs\";\n\nconst monday = mondaySdk({\n  clientId: \"4e35caa6c69460ae555a974852334926\",\n  apiToken,\n});\nconst AppSolution = () => {\n  // constructor(props) {\n  //   super(props);\n\n  //   // Default state\n  //   this.state = {\n  //     recordState: null,\n\n  //     settings: {},\n  //     context: {},\n  //     name: \"\",\n\n  //     audioDetails: {\n  //       url: null,\n  //       blob: null,\n  //       chunks: null,\n  //       duration: {\n  //         h: null,\n  //         m: null,\n  //         s: null,\n  //       },\n  //     },\n  //   };\n  // }\n  let [audioURL, isRecording, startRecording, stopRecording] = useRecorder();\n  const start = () => {\n    this.setState({\n      recordState: RecordState.START,\n    });\n  };\n\n  const stop = () => {\n    this.setState({\n      recordState: RecordState.STOP,\n    });\n  };\n\n  //audioData contains blob and blobUrl\n  const onStop = (audioData) => {\n    console.log(\"audioData\", audioData);\n  };\n\n  useEffect(() => {\n    // monday.listen(\"settings\", (res) => {\n    //   this.setState({ settings: res.data });\n    // });\n    // monday.api(`query { me { name } }`).then((res) => {\n    //   this.setState({ name: res.data.me.name });\n    // });\n  }, []);\n  // TODO: set up event listeners\n\n  const _onRecordingComplete = (blob) => {\n    debugger;\n    console.log(\"recording\", blob);\n  };\n\n  const _onRecordingError = (err) => {\n    debugger;\n    console.log(\"recording error\", err);\n  };\n\n  const _blobToFile = (theBlob, fileName) => {\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    const newFile = new File([theBlob], fileName, {\n      type: theBlob.type,\n    });\n\n    return newFile;\n  };\n  const _handleBlob = async (blob) => {\n    try {\n      debugger;\n      const file = _blobToFile(blob, \"myFileName\");\n      debugger;\n\n      const response = await monday.get(\"context\");\n      const { itemId, boardId } = response.data;\n      const newUpdateId = await _createUpdate(itemId);\n      const newColumnId = await _createColumn(boardId, \"Description\");\n\n      await _addFileToUpdate(newUpdateId, file);\n      await _addFileToColumn(itemId, newColumnId, file);\n    } catch (error) {}\n  };\n\n  const _createUpdate = async (itemId) => {\n    //query to create an update\n\n    // monday.api(`query { me { name } }`).then((res) => {\n    //   this.setState({ name: res.data.me.name });\n    // });\n\n    const response = await monday.api(`mutation {\n      create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n      id\n      }\n      }`);\n\n    const { id } = response.data.create_update;\n    return id;\n  };\n\n  const _createColumn = async (boardId, columnName) => {\n    //query to create an update\n\n    // monday.api(`query { me { name } }`).then((res) => {\n    //   this.setState({ name: res.data.me.name });\n    // });\n    const response = await monday.api(`mutation {\n      create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n      id\n      }\n      }`);\n    const { id } = response.data.create_column;\n    return id;\n  };\n\n  const _addFileToColumn = async (itemId, newColumnId, file) => {\n    // const response = await monday.api(`mutation {\n    //   add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId}, file: ${file}) {\n    //   id\n    //   }\n    //   }`);\n    // debugger;\n\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.webm\");\n\n    const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(\"https://api.monday.com/v2/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: apiToken,\n        },\n      });\n    } catch (error) {\n      debugger;\n      //internal 500 server error\n    }\n  };\n\n  const _addFileToUpdate = async (newUpdateId, file) => {\n    const blob = new Blob([\"Hello World!\"], {\n      type: \"text/plain;charset=utf-8\",\n    });\n    const newFile = new File([blob], \"fileName\", {\n      type: blob.type,\n    });\n    // let query = `mutation {\n    //   add_file_to_update (update_id: ${newUpdateId}, file: ${newFile}) {\n    //   id\n    //   }\n    //   }`;\n\n    // const query = `mutation add_file($update_id:Int!, $file: File!) {\n    //   add_file_to_update(update_id: $update_id, file: $file) {\n    //   id\n    //   }\n    //   }\n\n    //   `;\n\n    // const variables = {\n    //   update_ids: newUpdateId,\n    //   file: newFile,\n    // };\n    const formData = new FormData();\n    formData.append(\"variables[file]\", file, \"filename.webm\");\n\n    const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n    formData.append(\"query\", noVariableQuery);\n\n    try {\n      const res = await axios.post(\"https://api.monday.com/v2/\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: apiToken,\n        },\n      });\n    } catch (error) {\n      debugger;\n      //internal 500 server error\n    }\n\n    // fetch(\"https://api.monday.com/v2\", {\n    //   method: \"post\",\n    //   headers: {\n    //     \"Content-Type\": \"multipart/form-data\",\n    //     Authorization: apiToken,\n    //   },\n    //   body: JSON.stringify({\n    //     query: query,\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((res) => {\n    //     debugger;\n    //     console.log(JSON.stringify(res, null, 2));\n    //   });\n\n    // await axios\n    //   .post(\"https://api.monday.com/v2\", {\n    //     headers: {\n    //       // \"Content-Type\": \"multipart/form-data\",\n    //       Authorization: apiToken,\n    //     },\n    //     method: \"post\",\n    //     data: {\n    //       query: `mutation {\n    //     add_file_to_update (update_id: Int!, $file: File!) {\n    //     id\n    //     }\n    //     }`,\n    //       variables: {\n    //         update_id: newUpdateId,\n    //         $file: JSON.stringify(file),\n    //       },\n    //     },\n    //   })\n    //   .then((result) => {\n    //     debugger;\n    //     console.log(result.data);\n    //   })\n    //   .catch(function (error) {\n    //     debugger;\n    //     console.log(error);\n    //   });\n\n    const config = {\n      headers: {\n        Authorization: apiToken,\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    };\n    // try {\n    //   const response = await axios.post(\"https://api.monday.com/v2/file\", file, config);\n\n    // } catch (error) {\n  };\n\n  const handleAudioStop = (data) => {\n    console.log(data);\n    this.setState({ audioDetails: data });\n  };\n  const handleAudioUpload = (file) => {\n    console.log(file);\n  };\n  const handleReset = () => {\n    const reset = {\n      url: null,\n      blob: null,\n      chunks: null,\n      duration: {\n        h: null,\n        m: null,\n        s: null,\n      },\n    };\n    this.setState({ audioDetails: reset });\n  };\n\n  // const newFile = this._blobToFile(\"\", \"myNewFileName\");\n  // const { recordState } = this.state;\n\n  return (\n    <div\n      className=\"App\"\n      // style={{ background: this.state.settings.background, margin: \"auto\" }}\n    >\n      {/* Hello, {this.state.name}! */}\n      {/* <Recorder\n          onRecordingComplete={this._onRecordingComplete}\n          onRecordingError={this._onRecordingError}\n        /> */}\n      {/* <VideoRecorder\n          onRecordingComplete={(videoBlob) => {\n            // Do something with the video...\n            this._handleBlob(videoBlob);\n          }}\n          constraints={{\n            video: false,\n            audio: true,\n          }}\n          countdownTime={2000}\n          mimeType={\"audio/mp4\"}\n        /> */}\n      {/* <Recorder\n          record={true}\n          title={\"New recording\"}\n          audioURL={this.state.audioDetails.url}\n          showUIAudio\n          handleAudioStop={(data) => this.handleAudioStop(data)}\n          handleOnChange={(value) => this.handleOnChange(value, \"firstname\")}\n          handleAudioUpload={(data) => this._handleBlob(data)}\n          handleReset={() => this.handleReset()}\n          mimeTypeToUseWhenRecording={\"audio/webm\"}\n        /> */}\n      <audio src={audioURL} controls />\n      <button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </button>\n    </div>\n  );\n};\n\nexport default AppSolution;\n"]},"metadata":{},"sourceType":"module"}