{"ast":null,"code":"var _jsxFileName = \"/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Recorder from \"react-mp3-recorder\";\nimport VideoRecorder from \"react-video-recorder\";\nimport axios from \"axios\";\nconst apiToken = \"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjExMzE4NzU1NywidWlkIjoyMjYwNDQ1MCwiaWFkIjoiMjAyMS0wNi0xMFQxMDowNTo1MS44NzdaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6OTE5NjAxNCwicmduIjoidXNlMSJ9.MIJ6sN_Rqnfkpfkl51eBCBQMgx_RPNvBGRXMlmTrUKs\";\nconst monday = mondaySdk({\n  clientId: \"8286fbdc70dd761eb957ef68787b4511\",\n  apiToken\n});\n\nclass AppSolution extends React.Component {\n  constructor(props) {\n    super(props); // Default state\n\n    this._onRecordingComplete = blob => {\n      debugger;\n      console.log(\"recording\", blob);\n    };\n\n    this._onRecordingError = err => {\n      debugger;\n      console.log(\"recording error\", err);\n    };\n\n    this._blobToFile = (theBlob, fileName) => {\n      theBlob.lastModifiedDate = new Date();\n      theBlob.name = fileName;\n      const newFile = new File([theBlob], fileName, {\n        type: theBlob.type\n      });\n      return newFile;\n    };\n\n    this._handleBlob = async blob => {\n      try {\n        const file = this._blobToFile(blob, \"myFileName\");\n\n        const response = await monday.get(\"context\");\n        const {\n          itemId,\n          boardId\n        } = response.data;\n        debugger;\n        const newUpdateId = await this._createUpdate(itemId); // const newColumnId = await this._createColumn(boardId, \"filecolumn\");\n\n        await this._addFileToUpdate(newUpdateId, file); // await this._addFileToColumn(itemId, newColumnId, file);\n      } catch (error) {}\n    };\n\n    this._createUpdate = async itemId => {\n      //query to create an update\n      // monday.api(`query { me { name } }`).then((res) => {\n      //   this.setState({ name: res.data.me.name });\n      // });\n      const response = await monday.api(`mutation {\n      create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n      id\n      }\n      }`);\n      const {\n        id\n      } = response.data.create_update;\n      return id;\n    };\n\n    this._createColumn = async (boardId, columnName) => {\n      //query to create an update\n      // monday.api(`query { me { name } }`).then((res) => {\n      //   this.setState({ name: res.data.me.name });\n      // });\n      debugger;\n      const response = await monday.api(`mutation {\n      create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n      id\n      }\n      }`);\n      debugger;\n      const {\n        id\n      } = response.data.create_column;\n      debugger;\n      return id;\n    };\n\n    this._addFileToColumn = async (itemId, newColumnId, file) => {\n      const response = await monday.api(`mutation {\n      add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId}, file: ${file}) {\n      id\n      }\n      }`);\n      debugger;\n    };\n\n    this._addFileToUpdate = async newUpdateId => {\n      const blob = new Blob([\"Hello World!\"], {\n        type: \"text/plain;charset=utf-8\"\n      });\n      const newFile = new File([blob], \"fileName\", {\n        type: blob.type\n      }); // let query = `mutation {\n      //   add_file_to_update (update_id: ${newUpdateId}, file: ${newFile}) {\n      //   id\n      //   }\n      //   }`;\n\n      const query = `\n\n      mutation add_file($update_id:${newUpdateId}, $file: ${newFile}) {\n      \n      add_file_to_update(update_id: $update_id, file: $file) {\n      \n      id\n      \n      }\n      \n      }\n      \n      `;\n      const variables = {\n        update_id: parseInt(newUpdateId),\n        file: newFile\n      };\n\n      try {\n        const response = await monday.api(query, variables);\n        debugger;\n      } catch (error) {//internal 500 server error\n      } // fetch(\"https://api.monday.com/v2\", {\n      //   method: \"post\",\n      //   headers: {\n      //     \"Content-Type\": \"multipart/form-data\",\n      //     Authorization: apiToken,\n      //   },\n      //   body: JSON.stringify({\n      //     query: query,\n      //   }),\n      // })\n      //   .then((res) => res.json())\n      //   .then((res) => {\n      //     debugger;\n      //     console.log(JSON.stringify(res, null, 2));\n      //   });\n      // await axios\n      //   .post(\"https://api.monday.com/v2\", {\n      //     headers: {\n      //       // \"Content-Type\": \"multipart/form-data\",\n      //       Authorization: apiToken,\n      //     },\n      //     method: \"post\",\n      //     data: {\n      //       query: `mutation {\n      //     add_file_to_update (update_id: Int!, $file: File!) {\n      //     id\n      //     }\n      //     }`,\n      //       variables: {\n      //         update_id: newUpdateId,\n      //         $file: JSON.stringify(file),\n      //       },\n      //     },\n      //   })\n      //   .then((result) => {\n      //     debugger;\n      //     console.log(result.data);\n      //   })\n      //   .catch(function (error) {\n      //     debugger;\n      //     console.log(error);\n      //   });\n\n\n      const config = {\n        headers: {\n          Authorization: apiToken,\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      }; // try {\n      //   const response = await axios.post(\"https://api.monday.com/v2/file\", file, config);\n      // } catch (error) {\n    };\n\n    this.state = {\n      settings: {},\n      context: {},\n      name: \"\"\n    };\n  }\n\n  componentDidMount() {\n    // TODO: set up event listeners\n    monday.listen(\"settings\", res => {\n      this.setState({\n        settings: res.data\n      });\n    });\n    monday.api(`query { me { name } }`).then(res => {\n      this.setState({\n        name: res.data.me.name\n      });\n    });\n  }\n\n  render() {\n    // const newFile = this._blobToFile(\"\", \"myNewFileName\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      style: {\n        background: this.state.settings.background\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 7\n      }\n    }, \"Hello, \", this.state.name, \"!\", /*#__PURE__*/React.createElement(VideoRecorder, {\n      onRecordingComplete: videoBlob => {\n        // Do something with the video...\n        this._handleBlob(videoBlob);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default AppSolution;","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js"],"names":["React","mondaySdk","Recorder","VideoRecorder","axios","apiToken","monday","clientId","AppSolution","Component","constructor","props","_onRecordingComplete","blob","console","log","_onRecordingError","err","_blobToFile","theBlob","fileName","lastModifiedDate","Date","name","newFile","File","type","_handleBlob","file","response","get","itemId","boardId","data","newUpdateId","_createUpdate","_addFileToUpdate","error","api","id","create_update","_createColumn","columnName","create_column","_addFileToColumn","newColumnId","Blob","query","variables","update_id","parseInt","config","headers","Authorization","state","settings","context","componentDidMount","listen","res","setState","then","me","render","background","videoBlob"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport mondaySdk from \"monday-sdk-js\";\nimport Recorder from \"react-mp3-recorder\";\nimport VideoRecorder from \"react-video-recorder\";\nimport axios from \"axios\";\n\nconst apiToken =\n  \"eyJhbGciOiJIUzI1NiJ9.eyJ0aWQiOjExMzE4NzU1NywidWlkIjoyMjYwNDQ1MCwiaWFkIjoiMjAyMS0wNi0xMFQxMDowNTo1MS44NzdaIiwicGVyIjoibWU6d3JpdGUiLCJhY3RpZCI6OTE5NjAxNCwicmduIjoidXNlMSJ9.MIJ6sN_Rqnfkpfkl51eBCBQMgx_RPNvBGRXMlmTrUKs\";\n\nconst monday = mondaySdk({\n  clientId: \"8286fbdc70dd761eb957ef68787b4511\",\n  apiToken,\n});\nclass AppSolution extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      settings: {},\n      context: {},\n      name: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // TODO: set up event listeners\n    monday.listen(\"settings\", (res) => {\n      this.setState({ settings: res.data });\n    });\n\n    monday.api(`query { me { name } }`).then((res) => {\n      this.setState({ name: res.data.me.name });\n    });\n  }\n  debugger;\n\n  _onRecordingComplete = (blob) => {\n    debugger;\n    console.log(\"recording\", blob);\n  };\n\n  _onRecordingError = (err) => {\n    debugger;\n    console.log(\"recording error\", err);\n  };\n\n  _blobToFile = (theBlob, fileName) => {\n    theBlob.lastModifiedDate = new Date();\n    theBlob.name = fileName;\n    const newFile = new File([theBlob], fileName, {\n      type: theBlob.type,\n    });\n\n    return newFile;\n  };\n  _handleBlob = async (blob) => {\n    try {\n      const file = this._blobToFile(blob, \"myFileName\");\n      const response = await monday.get(\"context\");\n      const { itemId, boardId } = response.data;\n      debugger;\n      const newUpdateId = await this._createUpdate(itemId);\n      // const newColumnId = await this._createColumn(boardId, \"filecolumn\");\n\n      await this._addFileToUpdate(newUpdateId, file);\n      // await this._addFileToColumn(itemId, newColumnId, file);\n    } catch (error) {}\n  };\n\n  _createUpdate = async (itemId) => {\n    //query to create an update\n\n    // monday.api(`query { me { name } }`).then((res) => {\n    //   this.setState({ name: res.data.me.name });\n    // });\n\n    const response = await monday.api(`mutation {\n      create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n      id\n      }\n      }`);\n\n    const { id } = response.data.create_update;\n    return id;\n  };\n\n  _createColumn = async (boardId, columnName) => {\n    //query to create an update\n\n    // monday.api(`query { me { name } }`).then((res) => {\n    //   this.setState({ name: res.data.me.name });\n    // });\n    debugger;\n    const response = await monday.api(`mutation {\n      create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n      id\n      }\n      }`);\n    debugger;\n    const { id } = response.data.create_column;\n    debugger;\n    return id;\n  };\n\n  _addFileToColumn = async (itemId, newColumnId, file) => {\n    const response = await monday.api(`mutation {\n      add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId}, file: ${file}) {\n      id\n      }\n      }`);\n    debugger;\n  };\n  _addFileToUpdate = async (newUpdateId) => {\n    const blob = new Blob([\"Hello World!\"], {\n      type: \"text/plain;charset=utf-8\",\n    });\n    const newFile = new File([blob], \"fileName\", {\n      type: blob.type,\n    });\n    // let query = `mutation {\n    //   add_file_to_update (update_id: ${newUpdateId}, file: ${newFile}) {\n    //   id\n    //   }\n    //   }`;\n\n    const query = `\n\n      mutation add_file($update_id:${newUpdateId}, $file: ${newFile}) {\n      \n      add_file_to_update(update_id: $update_id, file: $file) {\n      \n      id\n      \n      }\n      \n      }\n      \n      `;\n\n    const variables = {\n      update_id: parseInt(newUpdateId),\n      file: newFile,\n    };\n\n    try {\n      const response = await monday.api(query, variables);\n      debugger;\n    } catch (error) {\n      //internal 500 server error\n    }\n\n    // fetch(\"https://api.monday.com/v2\", {\n    //   method: \"post\",\n    //   headers: {\n    //     \"Content-Type\": \"multipart/form-data\",\n    //     Authorization: apiToken,\n    //   },\n    //   body: JSON.stringify({\n    //     query: query,\n    //   }),\n    // })\n    //   .then((res) => res.json())\n    //   .then((res) => {\n    //     debugger;\n    //     console.log(JSON.stringify(res, null, 2));\n    //   });\n\n    // await axios\n    //   .post(\"https://api.monday.com/v2\", {\n    //     headers: {\n    //       // \"Content-Type\": \"multipart/form-data\",\n    //       Authorization: apiToken,\n    //     },\n    //     method: \"post\",\n    //     data: {\n    //       query: `mutation {\n    //     add_file_to_update (update_id: Int!, $file: File!) {\n    //     id\n    //     }\n    //     }`,\n    //       variables: {\n    //         update_id: newUpdateId,\n    //         $file: JSON.stringify(file),\n    //       },\n    //     },\n    //   })\n    //   .then((result) => {\n    //     debugger;\n    //     console.log(result.data);\n    //   })\n    //   .catch(function (error) {\n    //     debugger;\n    //     console.log(error);\n    //   });\n\n    const config = {\n      headers: {\n        Authorization: apiToken,\n        \"Content-Type\": \"multipart/form-data\",\n      },\n    };\n    // try {\n    //   const response = await axios.post(\"https://api.monday.com/v2/file\", file, config);\n\n    // } catch (error) {\n  };\n\n  render() {\n    // const newFile = this._blobToFile(\"\", \"myNewFileName\");\n\n    return (\n      <div\n        className=\"App\"\n        style={{ background: this.state.settings.background }}\n      >\n        Hello, {this.state.name}!\n        {/* <Recorder\n          onRecordingComplete={this._onRecordingComplete}\n          onRecordingError={this._onRecordingError}\n        /> */}\n        <VideoRecorder\n          onRecordingComplete={(videoBlob) => {\n            // Do something with the video...\n            this._handleBlob(videoBlob);\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default AppSolution;\n"]},"metadata":{},"sourceType":"module"}