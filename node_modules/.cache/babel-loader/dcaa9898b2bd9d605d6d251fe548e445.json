{"ast":null,"code":"export const getCurrentItemID = async mondayInstance => {\n  try {\n    const contextResponse = await mondayInstance.get(\"context\");\n    const {\n      itemId\n    } = contextResponse.data;\n    return itemId;\n  } catch (error) {}\n};\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  const query = ` query {items( ids : ${itemId}) {\n          updates {\n            id\n            body\n            creator_id\n            assets {\n              id\n              public_url\n            }\n          }\n        }}`;\n  const updatesResponse = await mondayInstance.api(query);\n  debugger;\n  const processedUpdates = await getProcessedUpdates(mondayInstance, updatesResponse);\n  return processedUpdates;\n};\n\nconst getProcessedUpdates = async (mondayInstance, updatesResponse) => {\n  if (updatesResponse.data.items[0].updates.length > 0) {\n    //has updates\n    const updatesWithVoiceMemos = updatesResponse.data.items[0].updates.filter(({\n      assets\n    }) => assets.length && filterAssetsByAssetType(assets));\n    const processedUpdatesWithVoiceMemos = await Promise.all(updatesWithVoiceMemos.map(({\n      id,\n      assets,\n      creator_id\n    }) => getCreatorName(mondayInstance, creator_id).then(creatorName => {\n      const assetId = assets[0].id;\n      const assetSrc = assets[0].public_url;\n      return {\n        creatorName,\n        updateId: id,\n        assetId,\n        assetSrc\n      };\n    })));\n    return processedUpdatesWithVoiceMemos;\n  }\n\n  return null;\n};\n\nconst filterAssetsByAssetType = assets => {\n  return assets.filter(({\n    public_url\n  }) => public_url.includes(\".webm\"));\n};\n\nconst getCreatorName = async (mondayInstance, creator_id) => {\n  const query = ` query { users ( ids : ${creator_id} ) { name }\n           }`;\n  const response = await mondayInstance.api(query);\n  return response.data.users[0].name;\n};","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/utils/on-load.js"],"names":["getCurrentItemID","mondayInstance","contextResponse","get","itemId","data","error","getVoiceMessagesHistory","query","updatesResponse","api","processedUpdates","getProcessedUpdates","items","updates","length","updatesWithVoiceMemos","filter","assets","filterAssetsByAssetType","processedUpdatesWithVoiceMemos","Promise","all","map","id","creator_id","getCreatorName","then","creatorName","assetId","assetSrc","public_url","updateId","includes","response","users","name"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAG,MAAOC,cAAP,IAA0B;AACxD,MAAI;AACF,UAAMC,eAAe,GAAG,MAAMD,cAAc,CAACE,GAAf,CAAmB,SAAnB,CAA9B;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaF,eAAe,CAACG,IAAnC;AACA,WAAOD,MAAP;AACD,GAJD,CAIE,OAAOE,KAAP,EAAc,CAAE;AACnB,CANM;AAQP,OAAO,MAAMC,uBAAuB,GAAG,OAAON,cAAP,EAAuBG,MAAvB,KAAkC;AACvE,QAAMI,KAAK,GAAI,wBAAuBJ,MAAO;;;;;;;;;;WAA7C;AAYA,QAAMK,eAAe,GAAG,MAAMR,cAAc,CAACS,GAAf,CAAmBF,KAAnB,CAA9B;AACA;AACA,QAAMG,gBAAgB,GAAG,MAAMC,mBAAmB,CAChDX,cADgD,EAEhDQ,eAFgD,CAAlD;AAIA,SAAOE,gBAAP;AACD,CApBM;;AAsBP,MAAMC,mBAAmB,GAAG,OAAOX,cAAP,EAAuBQ,eAAvB,KAA2C;AACrE,MAAIA,eAAe,CAACJ,IAAhB,CAAqBQ,KAArB,CAA2B,CAA3B,EAA8BC,OAA9B,CAAsCC,MAAtC,GAA+C,CAAnD,EAAsD;AACpD;AACA,UAAMC,qBAAqB,GAAGP,eAAe,CAACJ,IAAhB,CAAqBQ,KAArB,CAA2B,CAA3B,EAA8BC,OAA9B,CAAsCG,MAAtC,CAC5B,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAgBA,MAAM,CAACH,MAAP,IAAiBI,uBAAuB,CAACD,MAAD,CAD5B,CAA9B;AAIA,UAAME,8BAA8B,GAAG,MAAMC,OAAO,CAACC,GAAR,CAC3CN,qBAAqB,CAACO,GAAtB,CAA0B,CAAC;AAAEC,MAAAA,EAAF;AAAMN,MAAAA,MAAN;AAAcO,MAAAA;AAAd,KAAD,KACxBC,cAAc,CAACzB,cAAD,EAAiBwB,UAAjB,CAAd,CAA2CE,IAA3C,CAAiDC,WAAD,IAAiB;AAC/D,YAAMC,OAAO,GAAGX,MAAM,CAAC,CAAD,CAAN,CAAUM,EAA1B;AACA,YAAMM,QAAQ,GAAGZ,MAAM,CAAC,CAAD,CAAN,CAAUa,UAA3B;AACA,aAAO;AAAEH,QAAAA,WAAF;AAAeI,QAAAA,QAAQ,EAAER,EAAzB;AAA6BK,QAAAA,OAA7B;AAAsCC,QAAAA;AAAtC,OAAP;AACD,KAJD,CADF,CAD2C,CAA7C;AASA,WAAOV,8BAAP;AACD;;AACD,SAAO,IAAP;AACD,CAnBD;;AAqBA,MAAMD,uBAAuB,GAAID,MAAD,IAAY;AAC1C,SAAOA,MAAM,CAACD,MAAP,CAAc,CAAC;AAAEc,IAAAA;AAAF,GAAD,KAAoBA,UAAU,CAACE,QAAX,CAAoB,OAApB,CAAlC,CAAP;AACD,CAFD;;AAIA,MAAMP,cAAc,GAAG,OAAOzB,cAAP,EAAuBwB,UAAvB,KAAsC;AAC3D,QAAMjB,KAAK,GAAI,0BAAyBiB,UAAW;aAAnD;AAGA,QAAMS,QAAQ,GAAG,MAAMjC,cAAc,CAACS,GAAf,CAAmBF,KAAnB,CAAvB;AACA,SAAO0B,QAAQ,CAAC7B,IAAT,CAAc8B,KAAd,CAAoB,CAApB,EAAuBC,IAA9B;AACD,CAND","sourcesContent":["export const getCurrentItemID = async (mondayInstance) => {\n  try {\n    const contextResponse = await mondayInstance.get(\"context\");\n    const { itemId } = contextResponse.data;\n    return itemId;\n  } catch (error) {}\n};\n\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  const query = ` query {items( ids : ${itemId}) {\n          updates {\n            id\n            body\n            creator_id\n            assets {\n              id\n              public_url\n            }\n          }\n        }}`;\n\n  const updatesResponse = await mondayInstance.api(query);\n  debugger\n  const processedUpdates = await getProcessedUpdates(\n    mondayInstance,\n    updatesResponse\n  );\n  return processedUpdates;\n};\n\nconst getProcessedUpdates = async (mondayInstance, updatesResponse) => {\n  if (updatesResponse.data.items[0].updates.length > 0) {\n    //has updates\n    const updatesWithVoiceMemos = updatesResponse.data.items[0].updates.filter(\n      ({ assets }) => assets.length && filterAssetsByAssetType(assets)\n    );\n\n    const processedUpdatesWithVoiceMemos = await Promise.all(\n      updatesWithVoiceMemos.map(({ id, assets, creator_id }) =>\n        getCreatorName(mondayInstance, creator_id).then((creatorName) => {\n          const assetId = assets[0].id;\n          const assetSrc = assets[0].public_url;\n          return { creatorName, updateId: id, assetId, assetSrc };\n        })\n      )\n    );\n    return processedUpdatesWithVoiceMemos;\n  }\n  return null;\n};\n\nconst filterAssetsByAssetType = (assets) => {\n  return assets.filter(({ public_url }) => public_url.includes(\".webm\"));\n};\n\nconst getCreatorName = async (mondayInstance, creator_id) => {\n  const query = ` query { users ( ids : ${creator_id} ) { name }\n           }`;\n\n  const response = await mondayInstance.api(query);\n  return response.data.users[0].name;\n};\n"]},"metadata":{},"sourceType":"module"}