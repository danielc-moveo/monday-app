{"ast":null,"code":"var _jsxFileName = \"/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport useRecorder from \"./components/useRecorder\";\nimport { useCallback } from \"react\";\nimport { _blobToFile, _createUpdate, _addFileToUpdate, getVoiceMessagesHistory, getCurrentItemID } from \"./utils/helper\";\nimport { MainScreen } from \"./components/MainScreen\";\n\nconst AppSolution = ({\n  mondayInstance\n}) => {\n  // const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n  let [audioURL, isRecording, startRecording, stopRecording, blob] = useRecorder();\n\n  const _handleBlob = useCallback(async blob => {\n    try {\n      const file = _blobToFile(blob, \"myFileName\");\n\n      const mondayContextResponse = await mondayInstance.get(\"context\");\n      const {\n        itemId,\n        boardId\n      } = mondayContextResponse.data; // const updates = await getUpdates();\n\n      const newUpdateId = await _createUpdate(itemId);\n      await _addFileToUpdate(newUpdateId, file);\n    } catch (error) {}\n  }, [mondayInstance]);\n\n  useEffect(() => {\n    // mondayInstance.listen(\"settings\", (res) => {\n    //   setSettings(res.data);\n    // });\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]);\n  useEffect(() => {\n    const fetchData = async () => {\n      debugger;\n      const itemId = await getCurrentItemID(mondayInstance);\n      debugger;\n      const messagesHistory = await getVoiceMessagesHistory(mondayInstance, itemId);\n      debugger;\n    };\n\n    fetchData();\n  }, [mondayInstance]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MainScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), userName && `Hello, ${userName}`, /*#__PURE__*/React.createElement(\"audio\", {\n    src: audioURL,\n    controls: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: startRecording,\n    disabled: isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"start recording\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: stopRecording,\n    disabled: !isRecording,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, \"stop recording\"));\n};\n\nexport default AppSolution;","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/AppSolution.js"],"names":["React","useEffect","useState","useRecorder","useCallback","_blobToFile","_createUpdate","_addFileToUpdate","getVoiceMessagesHistory","getCurrentItemID","MainScreen","AppSolution","mondayInstance","userName","setUserName","audioURL","isRecording","startRecording","stopRecording","blob","_handleBlob","file","mondayContextResponse","get","itemId","boardId","data","newUpdateId","error","fetchData","messagesHistory"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAO,qCAAP;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SACEC,WADF,EAEEC,aAFF,EAGEC,gBAHF,EAIEC,uBAJF,EAKEC,gBALF,QAMO,gBANP;AAOA,SAASC,UAAT,QAA2B,yBAA3B;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAwB;AAC1C;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,IAAD,CAAxC;AAEA,MAAI,CAACa,QAAD,EAAWC,WAAX,EAAwBC,cAAxB,EAAwCC,aAAxC,EAAuDC,IAAvD,IACFhB,WAAW,EADb;;AAGA,QAAMiB,WAAW,GAAGhB,WAAW,CAC7B,MAAOe,IAAP,IAAgB;AACd,QAAI;AACF,YAAME,IAAI,GAAGhB,WAAW,CAACc,IAAD,EAAO,YAAP,CAAxB;;AACA,YAAMG,qBAAqB,GAAG,MAAMV,cAAc,CAACW,GAAf,CAAmB,SAAnB,CAApC;AACA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAsBH,qBAAqB,CAACI,IAAlD,CAHE,CAIF;;AACA,YAAMC,WAAW,GAAG,MAAMrB,aAAa,CAACkB,MAAD,CAAvC;AACA,YAAMjB,gBAAgB,CAACoB,WAAD,EAAcN,IAAd,CAAtB;AACD,KAPD,CAOE,OAAOO,KAAP,EAAc,CAAE;AACnB,GAV4B,EAW7B,CAAChB,cAAD,CAX6B,CAA/B;;AAcAX,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AAEA,QAAIkB,IAAJ,EAAU;AACRC,MAAAA,WAAW,CAACD,IAAD,CAAX;AACD;AACF,GARQ,EAQN,CAACA,IAAD,EAAOC,WAAP,CARM,CAAT;AAUAnB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4B,SAAS,GAAG,YAAY;AAC5B;AACA,YAAML,MAAM,GAAG,MAAMf,gBAAgB,CAACG,cAAD,CAArC;AACA;AACA,YAAMkB,eAAe,GAAG,MAAMtB,uBAAuB,CACnDI,cADmD,EAEnDY,MAFmD,CAArD;AAIA;AACD,KATD;;AAUAK,IAAAA,SAAS;AACV,GAZQ,EAYN,CAACjB,cAAD,CAZM,CAAT;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGC,QAAQ,IAAK,UAASA,QAAS,EAFlC,eAGE;AAAO,IAAA,GAAG,EAAEE,QAAZ;AAAsB,IAAA,QAAQ,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,eAIE;AAAQ,IAAA,OAAO,EAAEE,cAAjB;AAAiC,IAAA,QAAQ,EAAED,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAJF,eAOE;AAAQ,IAAA,OAAO,EAAEE,aAAjB;AAAgC,IAAA,QAAQ,EAAE,CAACF,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF,CADF;AAaD,CA1DD;;AA4DA,eAAeL,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport useRecorder from \"./components/useRecorder\";\nimport { useCallback } from \"react\";\nimport {\n  _blobToFile,\n  _createUpdate,\n  _addFileToUpdate,\n  getVoiceMessagesHistory,\n  getCurrentItemID,\n} from \"./utils/helper\";\nimport { MainScreen } from \"./components/MainScreen\";\n\nconst AppSolution = ({ mondayInstance }) => {\n  // const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n\n  let [audioURL, isRecording, startRecording, stopRecording, blob] =\n    useRecorder();\n\n  const _handleBlob = useCallback(\n    async (blob) => {\n      try {\n        const file = _blobToFile(blob, \"myFileName\");\n        const mondayContextResponse = await mondayInstance.get(\"context\");\n        const { itemId, boardId } = mondayContextResponse.data;\n        // const updates = await getUpdates();\n        const newUpdateId = await _createUpdate(itemId);\n        await _addFileToUpdate(newUpdateId, file);\n      } catch (error) {}\n    },\n    [mondayInstance]\n  );\n\n  useEffect(() => {\n    // mondayInstance.listen(\"settings\", (res) => {\n    //   setSettings(res.data);\n    // });\n\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      debugger\n      const itemId = await getCurrentItemID(mondayInstance);\n      debugger\n      const messagesHistory = await getVoiceMessagesHistory(\n        mondayInstance,\n        itemId\n      );\n      debugger;\n    };\n    fetchData();\n  }, [mondayInstance]);\n\n  return (\n    <div className=\"App\">\n      <MainScreen />\n      {userName && `Hello, ${userName}`}\n      <audio src={audioURL} controls />\n      <button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </button>\n    </div>\n  );\n};\n\nexport default AppSolution;\n"]},"metadata":{},"sourceType":"module"}