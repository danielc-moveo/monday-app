{"ast":null,"code":"import axios from \"../api/axios\"; // import { mondayInstance } from \"../api/monday\";\n\nexport const getItemID = async mondayInstance => {\n  try {\n    const res = await mondayInstance.get(\"context\");\n    debugger; // return itemId;\n  } catch (error) {}\n};\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  const query = ` query {items( ids : ${itemId}) {\n        updates {\n          id\n          body\n          assets {\n            id\n            public_url\n          }\n        }\n      }}`;\n  const updatesResponse = await mondayInstance.api(query);\n  debugger; //process response...\n};\nexport const _blobToFile = (theBlob, fileName) => {\n  theBlob.lastModifiedDate = new Date();\n  theBlob.name = fileName;\n  const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n  debugger;\n  const newFile = new File([theBlob], fileName, {\n    type: processedBlob.type\n  });\n  return newFile;\n};\nexport const _createUpdate = async (mondayInstance, itemId) => {\n  const query = `mutation {\n        create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const {\n    id\n  } = response.data.create_update;\n  return id;\n};\nexport const _addFileToUpdate = async (newUpdateId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n  const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {//internal 500 server error\n  }\n};\nexport const _createColumn = async (mondayInstance, boardId, columnName) => {\n  const query = `mutation {\n        create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const {\n    id\n  } = response.data.create_column;\n  return id;\n};\nexport const _addFileToColumn = async (itemId, newColumnId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n  const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {//internal 500 server error\n  }\n};","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/utils/helper.js"],"names":["axios","getItemID","mondayInstance","res","get","error","getVoiceMessagesHistory","itemId","query","updatesResponse","api","_blobToFile","theBlob","fileName","lastModifiedDate","Date","name","processedBlob","slice","size","newFile","File","type","_createUpdate","response","id","data","create_update","_addFileToUpdate","newUpdateId","file","formData","FormData","append","noVariableQuery","post","process","env","REACT_APP_BASE_URL","_createColumn","boardId","columnName","create_column","_addFileToColumn","newColumnId"],"mappings":"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","sourcesContent":["import axios from \"../api/axios\";\n// import { mondayInstance } from \"../api/monday\";\n\nexport const getItemID = async (mondayInstance) => {\n  try {\n    const res = await mondayInstance.get(\"context\");\n    debugger;\n    // return itemId;\n  } catch (error) {}\n};\n\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  const query = ` query {items( ids : ${itemId}) {\n        updates {\n          id\n          body\n          assets {\n            id\n            public_url\n          }\n        }\n      }}`;\n\n  const updatesResponse = await mondayInstance.api(query);\n  debugger;\n  //process response...\n};\n\nexport const _blobToFile = (theBlob, fileName) => {\n  theBlob.lastModifiedDate = new Date();\n  theBlob.name = fileName;\n  const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n  debugger;\n  const newFile = new File([theBlob], fileName, {\n    type: processedBlob.type,\n  });\n\n  return newFile;\n};\n\nexport const _createUpdate = async (mondayInstance, itemId) => {\n  const query = `mutation {\n        create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n\n  const { id } = response.data.create_update;\n  return id;\n};\n\nexport const _addFileToUpdate = async (newUpdateId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n  const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {\n    //internal 500 server error\n  }\n};\n\nexport const _createColumn = async (mondayInstance, boardId, columnName) => {\n  const query = `mutation {\n        create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const { id } = response.data.create_column;\n  return id;\n};\n\nexport const _addFileToColumn = async (itemId, newColumnId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n  const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {\n    //internal 500 server error\n  }\n};\n"]},"metadata":{},"sourceType":"module"}