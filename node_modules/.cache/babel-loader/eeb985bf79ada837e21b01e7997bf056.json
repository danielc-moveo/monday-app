{"ast":null,"code":"var _jsxFileName = \"/Users/move0/Desktop/monday-app/src/AppSolution.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport useRecorder from \"./components/useRecorder\";\nimport { useCallback } from \"react\";\nimport { _blobToFile, _createUpdate, _addFileToUpdate } from \"./utils/helper\";\nimport { mondayInstance } from \"./api/monday\";\nimport { StartRecording } from \"./components/StartRecording\";\nimport { RecordingPlayer } from \"./components/RecordingPlayer\";\nimport { Header } from \"./components/Header\";\nimport styled from \"styled-components\";\nimport { FlexedColCenter } from \"./ui/Layouts\";\nconst Container = styled(FlexedColCenter)``;\n\nconst AppSolution = () => {\n  // const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n  let [audioURL, isRecording, startRecording, stopRecording, blob] = useRecorder();\n\n  const _handleBlob = useCallback(async blob => {\n    try {\n      const file = _blobToFile(blob, \"myFileName\");\n\n      const mondayContextResponse = await mondayInstance.get(\"context\");\n      const {\n        itemId,\n        boardId\n      } = mondayContextResponse.data; // const updates = await getUpdates();\n\n      const newUpdateId = await _createUpdate(itemId); // const newColumnId = await _createColumn(boardId, \"Description\");\n\n      await _addFileToUpdate(newUpdateId, file); // await _addFileToColumn(itemId, newColumnId, file);\n    } catch (error) {}\n  }, []);\n\n  useEffect(() => {\n    // mondayInstance.listen(\"settings\", (res) => {\n    //   setSettings(res.data);\n    // });\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]);\n\n  const startRecord = () => {\n    startRecording();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), !isRecording ? /*#__PURE__*/React.createElement(StartRecording, {\n    startRecord: startRecord,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(RecordingPlayer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default AppSolution;","map":{"version":3,"sources":["/Users/move0/Desktop/monday-app/src/AppSolution.js"],"names":["React","useEffect","useState","useRecorder","useCallback","_blobToFile","_createUpdate","_addFileToUpdate","mondayInstance","StartRecording","RecordingPlayer","Header","styled","FlexedColCenter","Container","AppSolution","userName","setUserName","audioURL","isRecording","startRecording","stopRecording","blob","_handleBlob","file","mondayContextResponse","get","itemId","boardId","data","newUpdateId","error","startRecord"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAO,qCAAP;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,gBAArC,QAA6D,gBAA7D;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,eAAT,QAAgC,cAAhC;AAEA,MAAMC,SAAS,GAAGF,MAAM,CAACC,eAAD,CAAkB,EAA1C;;AAEA,MAAME,WAAW,GAAG,MAAM;AACxB;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,IAAD,CAAxC;AAEA,MAAI,CAACgB,QAAD,EAAWC,WAAX,EAAwBC,cAAxB,EAAwCC,aAAxC,EAAuDC,IAAvD,IACFnB,WAAW,EADb;;AAGA,QAAMoB,WAAW,GAAGnB,WAAW,CAAC,MAAOkB,IAAP,IAAgB;AAC9C,QAAI;AACF,YAAME,IAAI,GAAGnB,WAAW,CAACiB,IAAD,EAAO,YAAP,CAAxB;;AACA,YAAMG,qBAAqB,GAAG,MAAMjB,cAAc,CAACkB,GAAf,CAAmB,SAAnB,CAApC;AACA,YAAM;AAAEC,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAsBH,qBAAqB,CAACI,IAAlD,CAHE,CAIF;;AAEA,YAAMC,WAAW,GAAG,MAAMxB,aAAa,CAACqB,MAAD,CAAvC,CANE,CAOF;;AAEA,YAAMpB,gBAAgB,CAACuB,WAAD,EAAcN,IAAd,CAAtB,CATE,CAUF;AACD,KAXD,CAWE,OAAOO,KAAP,EAAc,CAAE;AACnB,GAb8B,EAa5B,EAb4B,CAA/B;;AAeA9B,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA;AAEA,QAAIqB,IAAJ,EAAU;AACRC,MAAAA,WAAW,CAACD,IAAD,CAAX;AACD;AACF,GARQ,EAQN,CAACA,IAAD,EAAOC,WAAP,CARM,CAAT;;AAUA,QAAMS,WAAW,GAAG,MAAM;AACxBZ,IAAAA,cAAc;AACf,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEG,CAACD,WAAD,gBACC,oBAAC,cAAD;AAAgB,IAAA,WAAW,EAAEa,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,gBAGC,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADF,CADF;AAsBD,CA1DD;;AA4DA,eAAejB,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport \"react-voice-recorder/dist/index.css\";\nimport useRecorder from \"./components/useRecorder\";\nimport { useCallback } from \"react\";\nimport { _blobToFile, _createUpdate, _addFileToUpdate } from \"./utils/helper\";\nimport { mondayInstance } from \"./api/monday\";\nimport { StartRecording } from \"./components/StartRecording\";\nimport { RecordingPlayer } from \"./components/RecordingPlayer\";\nimport { Header } from \"./components/Header\";\nimport styled from \"styled-components\";\nimport { FlexedColCenter } from \"./ui/Layouts\";\n\nconst Container = styled(FlexedColCenter)``;\n\nconst AppSolution = () => {\n  // const [settings, setSettings] = useState(null);\n  const [userName, setUserName] = useState(null);\n\n  let [audioURL, isRecording, startRecording, stopRecording, blob] =\n    useRecorder();\n\n  const _handleBlob = useCallback(async (blob) => {\n    try {\n      const file = _blobToFile(blob, \"myFileName\");\n      const mondayContextResponse = await mondayInstance.get(\"context\");\n      const { itemId, boardId } = mondayContextResponse.data;\n      // const updates = await getUpdates();\n\n      const newUpdateId = await _createUpdate(itemId);\n      // const newColumnId = await _createColumn(boardId, \"Description\");\n\n      await _addFileToUpdate(newUpdateId, file);\n      // await _addFileToColumn(itemId, newColumnId, file);\n    } catch (error) {}\n  }, []);\n\n  useEffect(() => {\n    // mondayInstance.listen(\"settings\", (res) => {\n    //   setSettings(res.data);\n    // });\n\n    if (blob) {\n      _handleBlob(blob);\n    }\n  }, [blob, _handleBlob]);\n\n  const startRecord = () => {\n    startRecording();\n  };\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header />\n        {!isRecording ? (\n          <StartRecording startRecord={startRecord} />\n        ) : (\n          <RecordingPlayer />\n        )}\n        {/* <RecordingScreen /> */}\n\n        {/* {userName && `Hello, ${userName}`}\n      <audio src={audioURL} controls />\n      <button onClick={startRecording} disabled={isRecording}>\n        start recording\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        stop recording\n      </button> */}\n      </Container>\n    </div>\n  );\n};\n\nexport default AppSolution;\n"]},"metadata":{},"sourceType":"module"}