{"ast":null,"code":"import axios from \"../api/axios\";\nexport const getCurrentItemID = async mondayInstance => {\n  try {\n    const contextResponse = await mondayInstance.get(\"context\");\n    const {\n      itemId\n    } = contextResponse.data;\n    return itemId;\n  } catch (error) {}\n};\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  const query = ` query {items( ids : ${itemId}) {\n        updates {\n          id\n          body\n          creator_id\n          assets {\n            id\n            public_url\n          }\n        }\n      }}`;\n  const updatesResponse = await mondayInstance.api(query);\n  const processedUpdates = await getProcessedUpdates(mondayInstance, updatesResponse);\n  return processedUpdates;\n};\n\nconst getProcessedUpdates = async (mondayInstance, updatesResponse) => {\n  if (updatesResponse.data.items[0].updates.length > 0) {\n    //has updates\n    const updatesWithVoiceMemos = updatesResponse.data.items[0].updates.filter(({\n      assets\n    }) => assets.length && filterAssetsByAssetType(assets));\n    debugger;\n    const processedUpdatesWithVoiceMemos = await Promise.all(updatesWithVoiceMemos.map(({\n      id,\n      assets,\n      creator_id\n    }) => getCreatorName(mondayInstance, creator_id).then(creatorName => {\n      const assetId = assets[0].id;\n      const assetSrc = assets[0].public_url;\n      return {\n        creatorName,\n        updateId: id,\n        assetId,\n        assetSrc\n      };\n    })));\n    return processedUpdatesWithVoiceMemos;\n  }\n\n  return null;\n};\n\nconst filterAssetsByAssetType = assets => {\n  return assets.filter(({\n    public_url\n  }) => public_url.includes(\".webm\"));\n}; // const getVoiceMemos = (mondayInstance, assets, creator_id) => {\n//   const assetsWithVoiceMemos = assets.filter((asset) =>\n//     filterAssetByAssetType(asset)\n//   );\n// };\n// const filterAssetByAssetType = (asset) => {\n//   return asset.public_url.includes(\".webm\");\n// };\n\n\nconst getCreatorName = async (mondayInstance, creator_id) => {\n  const query = ` query { users ( ids : ${creator_id} ) { name }\n         }`;\n  const response = await mondayInstance.api(query);\n  return response.data.users[0].name;\n};\n\nexport const _blobToFile = (theBlob, fileName) => {\n  theBlob.lastModifiedDate = new Date();\n  theBlob.name = fileName;\n  const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n  const newFile = new File([theBlob], fileName, {\n    type: processedBlob.type\n  });\n  return newFile;\n};\nexport const _createUpdate = async (mondayInstance, itemId) => {\n  const query = `mutation {\n        create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const {\n    id\n  } = response.data.create_update;\n  return id;\n};\nexport const _addFileToUpdate = async (newUpdateId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n  const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {//internal 500 server error\n  }\n};\nexport const _createColumn = async (mondayInstance, boardId, columnName) => {\n  const query = `mutation {\n        create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const {\n    id\n  } = response.data.create_column;\n  return id;\n};\nexport const _addFileToColumn = async (itemId, newColumnId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n  const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {//internal 500 server error\n  }\n};","map":{"version":3,"sources":["/Users/skills/team-task-item-view/quickstart-react/src/utils/helper.js"],"names":["axios","getCurrentItemID","mondayInstance","contextResponse","get","itemId","data","error","getVoiceMessagesHistory","query","updatesResponse","api","processedUpdates","getProcessedUpdates","items","updates","length","updatesWithVoiceMemos","filter","assets","filterAssetsByAssetType","processedUpdatesWithVoiceMemos","Promise","all","map","id","creator_id","getCreatorName","then","creatorName","assetId","assetSrc","public_url","updateId","includes","response","users","name","_blobToFile","theBlob","fileName","lastModifiedDate","Date","processedBlob","slice","size","newFile","File","type","_createUpdate","create_update","_addFileToUpdate","newUpdateId","file","formData","FormData","append","noVariableQuery","res","post","process","env","REACT_APP_BASE_URL","_createColumn","boardId","columnName","create_column","_addFileToColumn","newColumnId"],"mappings":"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","sourcesContent":["import axios from \"../api/axios\";\n\nexport const getCurrentItemID = async (mondayInstance) => {\n  try {\n    const contextResponse = await mondayInstance.get(\"context\");\n    const { itemId } = contextResponse.data;\n    return itemId;\n  } catch (error) {}\n};\n\nexport const getVoiceMessagesHistory = async (mondayInstance, itemId) => {\n  const query = ` query {items( ids : ${itemId}) {\n        updates {\n          id\n          body\n          creator_id\n          assets {\n            id\n            public_url\n          }\n        }\n      }}`;\n\n  const updatesResponse = await mondayInstance.api(query);\n  const processedUpdates = await getProcessedUpdates(\n    mondayInstance,\n    updatesResponse\n  );\n  return processedUpdates;\n};\n\nconst getProcessedUpdates = async (mondayInstance, updatesResponse) => {\n  if (updatesResponse.data.items[0].updates.length > 0) {\n    //has updates\n    const updatesWithVoiceMemos = updatesResponse.data.items[0].updates.filter(\n      ({ assets }) => assets.length && filterAssetsByAssetType(assets)\n    );\n\n    debugger;\n    const processedUpdatesWithVoiceMemos = await Promise.all(\n      updatesWithVoiceMemos.map(({ id, assets, creator_id }) =>\n        getCreatorName(mondayInstance, creator_id).then((creatorName) => {\n          const assetId = assets[0].id;\n          const assetSrc = assets[0].public_url;\n          return { creatorName, updateId: id, assetId, assetSrc };\n        })\n      )\n    );\n    return processedUpdatesWithVoiceMemos;\n  }\n  return null;\n};\n\nconst filterAssetsByAssetType = (assets) => {\n  return assets.filter(({ public_url }) => public_url.includes(\".webm\"));\n};\n\n// const getVoiceMemos = (mondayInstance, assets, creator_id) => {\n//   const assetsWithVoiceMemos = assets.filter((asset) =>\n//     filterAssetByAssetType(asset)\n//   );\n// };\n\n// const filterAssetByAssetType = (asset) => {\n//   return asset.public_url.includes(\".webm\");\n// };\n\nconst getCreatorName = async (mondayInstance, creator_id) => {\n  const query = ` query { users ( ids : ${creator_id} ) { name }\n         }`;\n\n  const response = await mondayInstance.api(query);\n  return response.data.users[0].name;\n};\n\nexport const _blobToFile = (theBlob, fileName) => {\n  theBlob.lastModifiedDate = new Date();\n  theBlob.name = fileName;\n  const processedBlob = theBlob.slice(0, theBlob.size, \"video/mp4\");\n  const newFile = new File([theBlob], fileName, {\n    type: processedBlob.type,\n  });\n\n  return newFile;\n};\n\nexport const _createUpdate = async (mondayInstance, itemId) => {\n  const query = `mutation {\n        create_update (item_id: ${itemId}, body: \"This update is for a new video\") {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n\n  const { id } = response.data.create_update;\n  return id;\n};\n\nexport const _addFileToUpdate = async (newUpdateId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n  const noVariableQuery = `mutation addFile($file: File!) {add_file_to_update (update_id: ${newUpdateId}, file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {\n    //internal 500 server error\n  }\n};\n\nexport const _createColumn = async (mondayInstance, boardId, columnName) => {\n  const query = `mutation {\n        create_column (board_id: ${boardId}, title: ${columnName}, column_type: file) {\n        id\n        }\n        }`;\n  const response = await mondayInstance.api(query);\n  const { id } = response.data.create_column;\n  return id;\n};\n\nexport const _addFileToColumn = async (itemId, newColumnId, file) => {\n  const formData = new FormData();\n  formData.append(\"variables[file]\", file, \"filename.mp4\");\n\n  const noVariableQuery = `mutation addFile($file: File!) {  add_file_to_column (item_id: ${itemId}, column_id: ${newColumnId},file: $file) {id}}`;\n  formData.append(\"query\", noVariableQuery);\n\n  try {\n    const res = await axios.post(process.env.REACT_APP_BASE_URL, formData);\n  } catch (error) {\n    //internal 500 server error\n  }\n};\n"]},"metadata":{},"sourceType":"module"}